name: Report

on:
  workflow_run:
    workflows:
      - Testing
    types:
      - completed

jobs:
  Coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: Download Results Artifacts
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: ${{ github.event.workflow_run.name }}
        run_id: ${{ github.event.workflow_run.id }}
        run_number: ${{ github.event.workflow_run.run_number }}

    - name: Setup Code Coverage
      run: |
        set -e
        if ! test -f 'codecov.sh'; then
          set -- 0 1 2 3 4
          for try; do
            ! curl -s --max-time 30 -L 'https://codecov.io/bash' --output 'codecov.sh' || break
            sleep 15
          done
        fi
        test -f 'codecov.sh' || exit 1

    - name: Upload Coverage Results
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        # Convince codecov that it ran from the build workflow
        export GITHUB_HEAD_REF="refs/heads/${{ github.event.workflow_run.pull_request[0].head.ref }}"
        export GITHUB_BASE_REF="refs/heads/${{ github.event.workflow_run.pull_request[0].base.ref }}"
        export GITHUB_REF="refs/pull/${{ github.event.workflow_run.pull_request[0].number }}/merge"
        export GITHUB_SHA="${{ github.event.workflow_run.pull_request[0].sha }}"
        export GITHUB_REPOSITORY="${{ github.event.repository.full_name }}"
        export GITHUB_WORKFLOW="${{ github.event.workflow_run.name }}"
        export GITHUB_RUN_ID="${{ github.event.workflow_run.id }}"

        # Fail for now
        ls -Al */*
        exit 1

        for artifact in "${artifacts}"; do
          mkdir "${GITHUB_RUN_ID}"
          (
            cd "${GITHUB_RUN_ID}"
            curl -o 'artifact.zip' "${{ github.event.repository.url }}}/suites/${{ github.event.workflow_run.id }}}/artifacts/${artifact}"
            unzip 'artifact.zip'
            . 'artifacts/.metadata'

            COVERAGE_ID="${OS_NAME}-${OS_VER}-Py${PY_VER}-Salt${SALT_VER}"
            OS_FLAG="$(echo "${OS_NAME}${OS_VER}" | tr '[A-Z]' '[a-z]' | tr '.' '_')"
            PY_FLAG="$(echo "py${PY_VER}" | tr -d '.')"
            SALT_FLAG="$(echo "salt${SALT_VER}" | tr '.' '_')"
            COVERAGE_FLAGS="${OS_FLAG},${PY_FLAG},${SALT_FLAG}"

            for report in project tests; do
              set -- 0 1 2 3 4
              for try; do
                ! bash '../codecov.sh' -R "${PWD}" -n "${COVERAGE_ID}-${report}" -f "artifacts/coverage-${report}.xml" -F "${COVERAGE_FLAGS},${report}" || break
                sleep 15
              done
            done &
            wait
          )
        done &
        wait
